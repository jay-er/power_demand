---
alwaysApply: true
description: "전력 수요 예측 앱의 구조·패턴·편집 가이드. Step 0~6, 전역 로딩 배너, 모델/지표, 안전한 수정 프로토콜."
---

# 전력 수요 예측 시스템 - 기술 스택 & 기능 가이드

## 🏗️ 프로젝트 구조

### 메인 파일
- [streamlit_app.py](mdc:streamlit_app.py) - 메인 Streamlit 애플리케이션
- [requirements.txt](mdc:requirements.txt) - Python 의존성 패키지
- [README.md](mdc:README.md) - 프로젝트 설명서

### UI 단계 플로우 (Streamlit)
- Step 0: 데이터 로딩 및 편집 — `st.header("📁 Step 0: ...")`
- Step 1: 데이터 준비 — `with st.expander("📋 Step 1: ...")`
- Step 2: 특징 공학 및 데이터 정제 — `with st.expander("🔧 Step 2: ...")`
- Step 3: 모델 변수 및 데이터 분리 — `with st.expander("🎯 Step 3: ...")`
- Step 4: 모델 학습 — `with st.expander("🤖 Step 4: ...")`
- Step 5: 모델 성능 평가 — `with st.expander("📊 Step 5: ...")`
- Step 6: 전력 수요 예측 — 입력 폼 및 결과 표시

### 설정 파일 (옵션)
- [.gitignore](mdc:.gitignore) - Git 무시 파일 설정

## 🛠️ 기술 스택

### Frontend & UI
- **Streamlit** - 웹 애플리케이션 프레임워크
- **Plotly** - 인터랙티브 차트 및 시각화
- **Pandas** - 데이터 처리 및 조작

### Backend & Data Processing
- **Python 3.x** - 메인 프로그래밍 언어
- **Scikit-learn** - 머신러닝 (RandomForestRegressor)
- **LightGBM** - 머신러닝 (LGBMRegressor, 가스수요 모델)
- **Pandas** - 데이터 분석 및 처리
- **NumPy** - 수치 계산

### Cloud & External Services
- **Google Sheets API** - 데이터 저장 및 동기화
- **gspread** - Google Sheets Python 라이브러리
- **Google OAuth2** - 서비스 계정 인증

### Deployment
- **Streamlit Cloud** - 클라우드 배포 플랫폼
- **Google Cloud Platform** - 서비스 계정 및 API 관리

## 🔧 주요 기능

### 1. 데이터 관리
- **자동 데이터 로딩**: 앱 시작 시 Google Sheets에서 자동 데이터 로드
- **실시간 편집**: Streamlit Data Editor를 통한 인라인 데이터 편집
- **변경 감지**: 수정된 부분만 Google Sheets에 업데이트
- **데이터 내보내기**: CSV, Excel 형식으로 데이터 다운로드

### 2. 머신러닝 예측
- **Random Forest 모델**: 전력 수요 예측
- **LightGBM 모델**: 가스 수요 예측 (단일 모델)
- **성능 평가**: MAE, R² 점수로 모델 성능 측정
- **예측 시각화**: Plotly를 통한 인터랙티브 차트

### 3. 시각화
- **데이터 미리보기**: 전체 데이터 테이블 표시
- **통계 정보**: 수치형/범주형 데이터 통계
- **예측 결과 차트**: 실제값 vs 예측값 비교
- **성능 메트릭**: 모델 성능 지표 시각화

### 4. Google Sheets 연동
- **서비스 계정 인증**: Google Cloud 서비스 계정 사용
- **자동 동기화**: 편집된 데이터 자동 저장
- **변경 감지**: 수정된 행만 효율적으로 업데이트
- **에러 처리**: API 한도 초과 등 예외 상황 처리

## 🔐 보안 & 인증

### Google Sheets 인증 방식
1. **환경변수**: `GOOGLE_CREDENTIALS_JSON`에서 서비스 계정 JSON 로드 (권장)
2. **하드코딩(백업)**: 코드 내 포함(개발/테스트용)
3. **배포 시크릿(옵션)**: 배포 환경의 시크릿 저장소 사용

### 시트 설정
- 코드 상 변수: `sheet_name`, `sheet_id` (예: Step 0 인접부)
- 서비스 계정 이메일을 대상 시트 공유자에 추가

## 📊 데이터 구조

### 필수 컬럼(예)
- **날짜**: 예측 기준 시점
- **최대수요/전력 수요**: 예측 대상
- **기상 데이터**: 최저/최고/체감 온도 등
- **태양광최대/잔여부하/비율** 등 파생 변수 (프로젝트 정의에 따름)

### 데이터 처리
- **자동 타입 변환**: 날짜 컬럼 자동 datetime 변환
- **결측값 처리**: 빈 값 처리 로직
- **데이터 검증**: 필수 필드 존재 여부 확인

## 🚀 배포 가이드

### Streamlit Cloud 배포
1. **Secrets 설정**: Streamlit Cloud 대시보드에서 `GOOGLE_CREDENTIALS_JSON` 설정
2. **GitHub 연동**: GitHub 저장소와 연결
3. **자동 배포**: 코드 변경 시 자동 재배포

### 로컬 개발
1. **의존성 설치**: `pip install -r requirements.txt`
2. **환경변수 설정**: `GOOGLE_CREDENTIALS_JSON` 환경변수 설정 (권장) 또는 코드 내 하드코딩된 값 사용
3. **실행**: `streamlit run streamlit_app.py`

## 🔄 코드 패턴 / 작업 프로토콜

### 데이터 로딩 패턴
```python
# 자동 데이터 로딩
if 'data' not in st.session_state:
    data = load_data_from_sheet(client, sheet_name, sheet_id)
    st.session_state.data = data
```

### 변경 감지 패턴
```python
# 변경된 부분만 업데이트
if original_data is not None:
    changed_rows = detect_changes(data, original_data)
    update_only_changed_rows(sheet, changed_rows)
```

### 모델 훈련 패턴
```python
# 자동 모델 재훈련
if st.session_state.data_updated:
    model = train_model(X_train, y_train)
    evaluate_model(model, X_test, y_test)
```

### 전역 로딩 배너 패턴 (Step 4~5)
```python
# 상단 전역 배너
global_status_placeholder = st.empty()

# Step 4 시작 시
if not st.session_state.get('is_training', False):
    st.session_state.is_training = True
    with global_status_placeholder.container():
        st.info("⏳ Step 4/5: 모델 학습 및 성능 평가 진행 중...")

# Step 5 종료 시
if st.session_state.get('is_training', False):
    st.session_state.is_training = False
    global_status_placeholder.empty()
```

### 편집 가이드(표준)
- 관련 위치 탐색: `expander(`, `Step`, `metric`, `predict(`, `mean_absolute_error`, `r2_score`
- 최소 범위 수정: 해당 Step 블록 한정으로 수정, 중복 출력 제거
- 사용자 경험: Step 5 성능 표시는 Step 5 익스팬더 내부 유지, 전역 배너는 상단 표시/제거
- 안전 장치: 변경 후 린트/실행 오류 0 유지, 세션 상태 키 충돌 방지

## 🐛 디버깅 가이드

### 일반적인 오류
1. **PEM 파일 오류**: 서비스 계정 키 형식 문제
2. **API 한도 초과**: Google Sheets API 호출 제한
3. **인증 실패**: 서비스 계정 권한 문제
4. **데이터 형식 오류**: 날짜 컬럼 변환 실패

### 해결 방법
- **환경변수 확인**: `GOOGLE_CREDENTIALS_JSON` 설정 및 권한 확인
- **권한 확인**: 시트 공유 대상에 서비스 계정 추가
- **데이터 검증**: 필수 컬럼/타입 점검, 결측 처리
- **로깅 추가**: `st.info()`, `st.error()`로 상태/에러 노출
